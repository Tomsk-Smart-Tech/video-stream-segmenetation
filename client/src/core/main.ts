// client/src/main.ts
import { startCamera } from './camera';
import { initializeModnet, initializeLandmarks } from './model';
import { processFrame } from './frameProcessor_branch';

import modelUrl from '../assets/model_q4f16.onnx?url';
import landmarkUrl from '../assets/fc_patched.onnx?url';

// --- –ù–ê–°–¢–†–û–ô–ö–ò ---
const LANDMARK_INTERVAL = 6; // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ N –∫–∞–¥—Ä–æ–≤
const L_MIN_MS = 180;        // –ù–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ X –º—Å (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–ø—Ä–æ–±–æ–∫" –µ—Å–ª–∏ FPS –≤—ã—Å–æ–∫–∏–π)

// --- –°–û–°–¢–û–Ø–ù–ò–ï ---
let lastAffine: { a11: number; a12: number; tx: number; a21: number; a22: number; ty: number } | null = null;
let landmarkInFlight = false; // –§–ª–∞–≥, —á—Ç–æ landmarks-–º–æ–¥–µ–ª—å —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ
let lastLandmarkRunAt = 0;    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

// MODNet —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ (WebGPU), –µ–≥–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
// –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–∞—Å–∫–∏.
let modnetLock: Promise<any> = Promise.resolve();
function runModnetExclusive<T>(fn: () => Promise<T>): Promise<T> {
  modnetLock = modnetLock.then(fn, fn);
  return modnetLock;
}


export async function run() {
  try {
    const videoElement = document.getElementById('webcam') as HTMLVideoElement;
    const outputCanvas = document.getElementById('output__mask') as HTMLCanvasElement;
    if (!videoElement || !outputCanvas) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã video –∏–ª–∏ canvas —ç–ª–µ–º–µ–Ω—Ç—ã');

    await startCamera(videoElement);

    const modnetSession = await initializeModnet(modelUrl);
    const landmarksSession = await initializeLandmarks(landmarkUrl);

    outputCanvas.width = videoElement.videoWidth;
    outputCanvas.height = videoElement.videoHeight;
    const ctx = outputCanvas.getContext('2d');
    if (!ctx) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas');

    let frameIdx = 0;

    async function loop() {
      // 1) MODNet –∏–Ω—Ñ–µ—Ä–µ–Ω—Å ‚Äî –æ–Ω –±—ã—Å—Ç—Ä—ã–π, –µ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ.
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
      await runModnetExclusive(() =>
        processFrame(videoElement, modnetSession, ctx, { lastAffine })
      );

      // 2) –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π landmarks-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ê–°–ò–ù–•–†–û–ù–ù–û –ò –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ï
      frameIdx++;
      const now = performance.now();
      if (
        frameIdx % LANDMARK_INTERVAL === 0 && // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∫–∞–¥—Ä–∞—Ö
        !landmarkInFlight &&                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        (now - lastLandmarkRunAt) >= L_MIN_MS // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º—Å
      ) {
        landmarkInFlight = true; // –ü–æ–¥–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
        lastLandmarkRunAt = now;

        const landmarkStartTime = performance.now();
        console.log(`[LüöÄ] Frame ${frameIdx}: –ó–∞–ø—É—Å–∫–∞–µ–º landmarks –º–æ–¥–µ–ª—å...`);
        
        // –ó–ê–ü–£–°–ö–ê–ï–ú –ë–ï–ó AWAIT!
        runAtkshDetector(videoElement, landmarksSession)
          .then((M) => {
            const duration = performance.now() - landmarkStartTime;
            if (M) {
              console.log(`[L‚úÖ] Landmarks –º–æ–¥–µ–ª—å –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞ ${duration.toFixed(1)}ms. –ú–∞—Ç—Ä–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
              const WARP_GAIN = 0.7;
              lastAffine = lastAffine
                ? {
                    a11: lastAffine.a11 * (1 - WARP_GAIN) + M.a11 * WARP_GAIN,
                    a12: lastAffine.a12 * (1 - WARP_GAIN) + M.a12 * WARP_GAIN,
                    tx:  lastAffine.tx  * (1 - WARP_GAIN) + M.tx  * WARP_GAIN,
                    a21: lastAffine.a21 * (1 - WARP_GAIN) + M.a21 * WARP_GAIN,
                    a22: lastAffine.a22 * (1 - WARP_GAIN) + M.a22 * WARP_GAIN,
                    ty:  lastAffine.ty  * (1 - WARP_GAIN) + M.ty  * WARP_GAIN,
                  }
                : M;
            } else {
              // <-- –õ–û–ì: –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –ª–∏—Ü–æ –Ω–µ –Ω–∞—à–ª–∞
              console.log(`[Lü§∑] Landmarks –º–æ–¥–µ–ª—å –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞ ${duration.toFixed(1)}ms, –Ω–æ –Ω–µ –Ω–∞—à–ª–∞ –ª–∏—Ü–æ.`);
            }
          })
          .catch((e) => {
            // <-- –õ–û–ì: –£–ª—É—á—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const duration = performance.now() - landmarkStartTime;
            console.warn(`[L‚ùå] –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ landmarks –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ ${duration.toFixed(1)}ms:`, e);
          })
          .finally(() => {
            landmarkInFlight = false;
          });
      }

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å landmarks
      requestAnimationFrame(loop);
    }

    loop();

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—é runAtkshDetector –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function runAtkshDetector(
  video: HTMLVideoElement,
  session: any
): Promise<{ a11: number; a12: number; tx: number; a21: number; a22: number; ty: number } | null> {
    // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä
const c = document.createElement('canvas');
c.width = video.videoWidth;
c.height = video.videoHeight;
const cx = c.getContext('2d', { willReadFrequently: true })!;
cx.drawImage(video, 0, 0, c.width, c.height);
const img = cx.getImageData(0, 0, c.width, c.height);
const u8 = img.data;
// –§–æ—Ä–º–∏—Ä—É–µ–º uint8 [H,W,3]
const hw3 = new Uint8Array(c.width * c.height * 3);
for (let i = 0, p = 0; i < u8.length; i += 4) {
hw3[p++] = u8[i];
hw3[p++] = u8[i + 1];
hw3[p++] = u8[i + 2];
}
const inp = new ort.Tensor('uint8', hw3, [c.height, c.width, 3]);
// –ó–∞–ø—É—Å–∫
const outputs = await session.run({ input: inp }) as Record<string, any>;
const scoresT = outputs['scores'];
const MT = outputs['M'];
if (!scoresT || !MT) return null;
const scores = scoresT.data as Float32Array;
const Mdata = MT.data as Float32Array;
const N = scoresT.dims[0];
const stride = 6; // 2x3
if (!N || N <= 0) return null;
let bestIdx = 0;
let bestScore = -Infinity;
for (let i = 0; i < N; i++) {
const s = scores[i];
if (s > bestScore) {
bestScore = s;
bestIdx = i;
}
}
const base = bestIdx * stride;
const a11 = Mdata[base + 0];
const a12 = Mdata[base + 1];
const tx  = Mdata[base + 2];
const a21 = Mdata[base + 3];
const a22 = Mdata[base + 4];
const ty  = Mdata[base + 5];
return { a11, a12, tx, a21, a22, ty };
}